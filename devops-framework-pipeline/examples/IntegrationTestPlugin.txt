@Library('devops-framework')
import org.devops.*

@GrabResolver(name='devops-core', root='file:///Volumes/WorkDisk/GROOVY/devops-framework/devops-framework-core/target/lib/')
@Grab('org.devops.framework.core:devops-framework-core:0.0.1-SNAPSHOT')
// Import the framework classes...
import org.devops.framework.core.*

def config = [
    property1: 'value1',
    property2: 'value2',
    property3: 'value3'
]

def label = "${JOB_NAME}".toLowerCase().replaceAll("[^A-Za-z0-9]", "-").replaceAll("(-)+", "-")

// This needs full specification, else you get a namespace conflict with Jenkins...
def intP = new org.devops.Integration(this, config)

node {

    File fetchDir = new File("/Volumes/WorkDisk/tmp/BuildJobs/")
    File targetRepo = new File("/Volumes/WorkDisk/tmp/Repos/")
    File targetRepoFile = new File(targetRepo.getAbsolutePath()+File.separator+"repo.json")
    String slackURI = "https://hooks.slack.com/services/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"

    //
    // Setup the Integration process...
    //

    // Where am I building...
    println "Using temporary directory "+fetchDir.getAbsolutePath()

    // Register a getComponentList callback...
    intP.getComponentList(body:{
        ComponentManifest manifest = new ComponentManifest(targetRepoFile)
        println ">Get the component list...<"
        manifest.getComponentList().each {
            k, v -> println "Component list is \"${v.componentName}-${v.componentVersion}-${v.componentLocation}\""
        }
        manifest = null
    })

    // Register a prepareForDeploy callback...
    intP.prepareForDeploy(body:{
        println ">Prepare Work Area - clean my files up...<"
        if (fetchDir.exists()) {
            Utilities.deleteDirs(fetchDir)
        }
        fetchDir.mkdirs()
    })

    // Register a get deploy assets callback...
    intP.getDeployAssets(body:{
        ComponentManifest manifest = new ComponentManifest(targetRepoFile)
        println ">Get deployment assets...<"
        manifest.getComponentList().each {
            k, v ->
            StringBuffer outputStr = new StringBuffer()

            // Parse the names of source and target...
            String location = v.componentLocation
            String fileName = location.substring(0,location.length()-v.componentVersion.length()-1)
            fileName = fileName.substring(targetRepo.getAbsolutePath().length(),fileName.length())
            File srcFile = new File(location)
            File tFile = new File(fetchDir.getAbsolutePath()+File.separator+fileName)

            // Perform copy...
            boolean retStat = Repository.pullAssetFromRepo(ConfigPropertiesConstants.FILE,
                                                            srcFile,tFile,null,null,outputStr)
            if (!retStat) {
                println "Repo pull failed "+outputStr.toString()
                Notifications.messageSlackChannel(slackURI,"${label}: Repo pull failed "+outputStr.toString())
                error("Repo pull failed "+outputStr.toString())
            }
            srcFile = null
            outputStr = null
        }
        manifest = null
    })

    String packageName = "tomCat-"+System.currentTimeMillis()

    // Register a pre-deploy callback...
    intP.preDeploy(body:{
        ComponentManifest manifest = new ComponentManifest(targetRepoFile)
        println ">Do pre-deploy...<"
        File dockerFile = new File(fetchDir.getAbsolutePath()+File.separator+"Dockerfile")
        String txt = new String()
        txt = "FROM tomcat"
        manifest.getComponentList().each {
            k, v ->
            // Parse the names of source and target...
            String location = v.componentLocation
            String fileName = location.substring(0,location.length()-v.componentVersion.length()-1)
            fileName = fileName.substring(targetRepo.getAbsolutePath().length(),fileName.length())
            File tFile = new File(fetchDir.getAbsolutePath()+File.separator+fileName)
            //
            // Copy files...
            txt+= "\nCOPY "+tFile.getName()+" /usr/local/tomcat/webapps/"
        }
        txt+= "\nEXPOSE 8080"
        txt+= "\nCMD [\"catalina.sh\", \"run\"]"

        Utilities.writeFile(dockerFile,txt)

        // Bake an image...
        StringBuffer outputStr = new StringBuffer()
        boolean retStat = Container.buildContainer(ConfigPropertiesConstants.DOCKER,packageName.toLowerCase(),
                                                    fetchDir,null,outputStr)
        if (retStat) {
            println "Bake worked"
            Notifications.messageSlackChannel(slackURI,"${label}: Bake worked")
        } else {
            println "Bake failed "+outputStr
            Notifications.messageSlackChannel(slackURI,"${label}: Bake failed "+outputStr.toString())
            error("Bake failed "+outputStr.toString())
        }
        manifest = null
        dockerFile.delete()
    })

    // Register a run-deploy callback...
    intP.runDeploy(body:{
        println ">Do deploy...<"
        // Run an image...
        StringBuffer outputStr = new StringBuffer()
        boolean retStat = Container.runContainer(ConfigPropertiesConstants.DOCKER,
                                                packageName.toLowerCase(),
                                                "ls /usr/local/tomcat/webapps/jpetstore.war",
                                                outputStr)
        if (retStat && outputStr.toString().contains("/usr/local/tomcat/webapps/jpetstore.war")) {
            println "Deploy worked"
            Notifications.messageSlackChannel(slackURI,"${label}: Deploy worked")
        } else {
            println "Deploy failed "+outputStr
            Notifications.messageSlackChannel(slackURI,"${label}: Deploy failed")
            error("Deploy failed "+outputStr.toString())
        }
    })

    // Register a post-deploy callback...
    intP.postDeploy(body:{
        println ">Post-deploy - clean my files up...<"
        if (fetchDir.exists()) {
            Utilities.deleteDirs(fetchDir)
        }
        fetchDir.mkdirs()
    })

    // Run the integration pipeline...
    intP.runPipeline()
}
